name: build

permissions:
  contents: write

on:
  push:
    branches:
      - "main"
  schedule:
    - cron: "0 0 * * 1"
  pull_request:

jobs:
  build-macos-aarch64:
    if: false
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: install
        run: |
          # xcode-select --install
          # brew install cocoapods
          brew install icu4c

          git clone https://github.com/WebKit/WebKit.git WebKit --depth=1

      - name: build
        run: |
          cd WebKit
          # ./Tools/Scripts/build-webkit --release --jsc-only --cmakeargs="-DENABLE_STATIC_JSC=ON"
          ./Tools/Scripts/build-webkit --release --jsc-only --cmakeargs="-DENABLE_STATIC_JSC=ON"

          cd ./WebKitBuild/JSCOnly/Release
          tar -czf jsc-aarch64-apple-darwin.tar.gz ./bin/jsc ./lib

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: jsc-aarch64-apple-darwin
          path: ./WebKit/WebKitBuild/JSCOnly/Release/jsc-aarch64-apple-darwin.tar.gz
  build-macos-x86_64:
    if: false
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: install
        run: |
          # xcode-select --install
          # brew install cocoapods
          brew install icu4c

          git clone https://github.com/WebKit/WebKit.git WebKit --depth=1

      - name: build
        run: |
          cd WebKit
          # ./Tools/Scripts/build-webkit --release --jsc-only --cmakeargs="-DENABLE_STATIC_JSC=ON"
          ./Tools/Scripts/build-webkit --release --jsc-only --cmakeargs="-DENABLE_STATIC_JSC=ON"

          cd ./WebKitBuild/JSCOnly/Release
          tar -czf jsc-x86_64-apple-darwin.tar.gz ./bin/jsc ./lib

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: jsc-x86_64-apple-darwin
          path: ./WebKit/WebKitBuild/JSCOnly/Release/jsc-x86_64-apple-darwin.tar.gz

  build-ubuntu:
    # runs-on: ubuntu-latest
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: install
        run: |
          sudo apt update

          sudo apt install wget unzip python3 ruby-full tree icu-devtools libicu74 libicu-dev -y

          # https://help.ubuntu.com/community/WebKit
          sudo apt-get install subversion autoconf automake libtool gperf bison flex autotools-dev -y

          git clone https://github.com/WebKit/WebKit.git WebKit --depth=1

      - name: build
        run: |
          cd WebKit
          # ./Tools/Scripts/build-webkit --release --jsc-only --cmakeargs="-DENABLE_STATIC_JSC=ON"
          ./Tools/Scripts/build-webkit --release --jsc-only --cmakeargs="-DENABLE_STATIC_JSC=ON"

          cd ./WebKitBuild/JSCOnly/Release
          tar -czf jsc-x86_64-unknown-linux-gnu.tar.gz ./bin/jsc ./lib

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: jsc-x86_64-unknown-linux-gnu
          path: ./WebKit/WebKitBuild/JSCOnly/Release/jsc-x86_64-unknown-linux-gnu.tar.gz
  build-windows:
    if: false
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: install
        run: |
          choco install -y xampp-81 python311 ruby cmake gperf llvm ninja perl

          # winget install --scope=machine --id Kitware.CMake Ninja-build.Ninja Python.Python.3.11 RubyInstallerTeam.Ruby.3.2 ApacheFriends.Xampp.8.2 LLVM.LLVM
          # winget install --id GnuWin32.Gperf

          python -m pip install pywin32
          git config --global core.autocrlf input
          git clone https://github.com/WebKit/WebKit.git WebKit --depth=1

      - name: build
        run: |
          ./env.bat
          cd WebKit
          perl Tools/Scripts/build-webkit --release --jsc-only --cmakeargs="-DENABLE_STATIC_JSC=ON"

          cd ./WebKitBuild/JSCOnly/Release
          tar -czf jsc-x86_64-pc-windows-msvc.tar.gz ./bin/jsc.exe ./lib

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: jsc-x86_64-pc-windows-msvc
          path: ./WebKit/WebKitBuild/JSCOnly/Release/jsc-x86_64-pc-windows-msvc.tar.gz

  build:
    needs: [
        "build-ubuntu",
        "build-windows",
        "build-macos-x86_64",
        "build-macos-aarch64",
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: jsc
          pattern: jsc-*
          merge-multiple: true

      - name: release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "jsc/*.tar.gz"